#pragma once
///////////////////////////////////////////////////////////////////////////////
// FILE     : Data3D.h
// SYNOPSIS : Data types representing 3D data.
// LICENSE  : MIT
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// HEADER FILES
///////////////////////////////////////////////////////////////////////////////

// PRECOMPILED HEADER FILE ////////////////////////////////////////////////////

#include "PCH.h"



///////////////////////////////////////////////////////////////////////////////
// NAMESPACE
///////////////////////////////////////////////////////////////////////////////

namespace Data3D
{
  /////////////////////////////////////////////////////////////////////////////
  // STRUCTURES
  /////////////////////////////////////////////////////////////////////////////

  struct D3D {
      std::vector<glm::vec3> vertices{};
      std::vector<glm::vec3> normals{};
      std::vector<glm::vec2> texture_uvs{};
      std::vector<unsigned int> colours_rgba8ui{};
      std::vector<unsigned int> indices{};
      unsigned char index_type_hint{};
  };
  static_assert ( sizeof ( unsigned int ) == 4,
      L"This code base needs colours to be 32-bit unsigned integers !" );

}


///////////////////////////////////////////////////////////////////////////////
// END
///////////////////////////////////////////////////////////////////////////////
/**
 * @file
 * @brief Code for data structures holding 3D information for the application.
 */
// Local variables:
// mode: c++
// End:
