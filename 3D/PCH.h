#pragma once
#pragma message(" ... producing a precompiled header file")
///////////////////////////////////////////////////////////////////////////////
// FILE     : PCH.h
// SYNOPSIS : Project-wide precompiled header file.
// LICENSE  : MIT
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// WINDOWS-SPECIFIC
///////////////////////////////////////////////////////////////////////////////

#define WIN32_LEAN_AND_MEAN
#include <windows.h>



///////////////////////////////////////////////////////////////////////////////
// HEADER FILES
///////////////////////////////////////////////////////////////////////////////

// SYSTEM /////////////////////////////////////////////////////////////////////

// OPENGL /////////////////////////////////////////////////////////////////////

#include <glad/glad.h>
#define GLFW_DEFINE_NONE
#include <GLFW/glfw3.h>

#define GLM_FORCE_CXX14
#define GLM_FORCE_INLINE
#define GLM_FORCE_EXPLICIT_CTOR
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/quaternion.hpp >
#include <glm/gtx/quaternion.hpp>

// BOOST //////////////////////////////////////////////////////////////////////

#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>
#include <boost/log/trivial.hpp>
#include <boost/log/utility/setup/file.hpp>
#include <boost/log/utility/setup/common_attributes.hpp>
#include <boost/scoped_array.hpp>

// STANDARD LIBRARY ///////////////////////////////////////////////////////////

#include <fstream>
#include <iomanip>

// LOCAL //////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// END
///////////////////////////////////////////////////////////////////////////////
/**
 * @file
 * @brief Header file for creating a precompiled header.
 */
// Local variables:
// mode: c++
// End:
